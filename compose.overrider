"""
Created by @RajdeepVerma
"""

import yaml
import os
import sys
import subprocess
import shutil

def check_docker():
    """Check if Docker is available and diagnose common issues"""
    # Check if running in Jenkins
    is_jenkins = 'JENKINS_HOME' in os.environ

    if not shutil.which('docker'):
        print("Error: Docker is not installed or not in PATH")
        if is_jenkins:
            print("Jenkins environment detected. Please ensure:")
            print("1. Docker is installed on the Jenkins agent")
            print("2. Jenkins user is in the docker group")
            print("3. Jenkins has been restarted after group changes")
        sys.exit(1)

    try:
        # Try to get more detailed error information
        result = subprocess.run(
            ['docker', 'info'],
            check=False,  # Don't exit immediately on error
            capture_output=True,
            text=True
        )

        if result.returncode != 0:
            print("Error: Cannot connect to Docker daemon")
            print(f"Docker error: {result.stderr.strip()}")

            if is_jenkins:
                print("\nJenkins-specific troubleshooting:")
                print("1. Verify Docker socket permissions:")
                print("   $ ls -l /var/run/docker.sock")
                print("2. Check if Jenkins user can access Docker:")
                print("   $ groups jenkins")
                print("3. Ensure Docker service is running:")
                print("   $ systemctl status docker")

                # Check Docker socket existence and permissions
                docker_socket = '/var/run/docker.sock'
                if os.path.exists(docker_socket):
                    socket_perms = os.stat(docker_socket)
                    print(f"\nDocker socket details:")
                    print(f"Permissions: {oct(socket_perms.st_mode)[-4:]}")
                    print(f"Owner: {socket_perms.st_uid}")
                    print(f"Group: {socket_perms.st_gid}")
                else:
                    print("\nError: Docker socket not found at /var/run/docker.sock")

            sys.exit(1)

    except Exception as e:
        print(f"Error checking Docker: {str(e)}")
        sys.exit(1)

def get_docker_compose_cmd():
    """Determine which docker compose command to use"""
    # Check for new docker compose
    try:
        subprocess.run(['docker', 'compose', 'version'],
                      check=True, capture_output=True)
        return ['docker', 'compose']
    except subprocess.CalledProcessError:
        # Check for docker-compose
        if shutil.which('docker-compose'):
            return ['docker-compose']
        else:
            print("Error: Neither 'docker compose' nor 'docker-compose' found")
            sys.exit(1)

def load_compose_file():
    # Try docker-compose.yaml first
    if os.path.exists("docker-compose.yaml"):
        with open("docker-compose.yaml", "r") as file:
            return yaml.load(file, Loader=yaml.FullLoader)
    # Fall back to docker-compose.yml
    elif os.path.exists("docker-compose.yml"):
        with open("docker-compose.yml", "r") as file:
            return yaml.load(file, Loader=yaml.FullLoader)
    else:
        raise FileNotFoundError("No docker-compose.yaml or docker-compose.yml found")

def load_deployment_config():
    # Try deployment-config.yaml first
    if os.path.exists("deployment-config.yaml"):
        with open("deployment-config.yaml", "r") as file:
            return yaml.load(file, Loader=yaml.FullLoader)
    # Fall back to deployment-config.yml
    elif os.path.exists("deployment-config.yml"):
        with open("deployment-config.yml", "r") as file:
            return yaml.load(file, Loader=yaml.FullLoader)
    else:
        raise FileNotFoundError("No deployment-config.yaml or deployment-config.yml found")

# Check Docker availability first
check_docker()

# Get appropriate docker compose command
compose_cmd = get_docker_compose_cmd()
print(f"Using compose command: {' '.join(compose_cmd)}")

# Try to load the docker-compose file, exit if not found
try:
    # Load docker-compose configuration
    docker_compose = load_compose_file()
    # Load deployment configuration
    deployment_config = load_deployment_config()
except FileNotFoundError as e:
    print(f"Error: {e}")
    sys.exit(1)

# Extract deployment configuration values
ConnectorName = deployment_config['name']
DomainName = deployment_config['domain']

# Ensure networks configuration exists at root level
if 'networks' not in docker_compose:
    docker_compose['networks'] = {}

# Add/update 'frontend' network at root level
docker_compose['networks']['frontend'] = { 'external': True }

# Ensure services exist
if 'services' not in docker_compose or not docker_compose['services']:
    print("Error: No services found in docker-compose file")
    sys.exit(1)

# Get first container name for later use
CONTAINER_NAME = next(iter(docker_compose['services'].keys()))

# Process all containers
for service_name, service_config in docker_compose['services'].items():
    # Remove ports from all containers if they exist
    if 'ports' in service_config:
        service_config.pop('ports')

    # Add frontend network only to the first container
    if service_name == CONTAINER_NAME:
        # Ensure networks configuration exists for the first container
        if 'networks' not in service_config:
            service_config['networks'] = {}

        # Add frontend network to first container
        service_config['networks']['frontend'] = {}

        # Ensure labels configuration exists
        if 'labels' not in service_config:
            service_config['labels'] = []

        # Add/update container labels as a list
        service_config['labels'] = [
            'traefik.enable=true',
            f'traefik.http.routers.{ConnectorName}.entrypoints=web',
            f'traefik.http.routers.{ConnectorName}.rule=Host(`{DomainName}`)'
        ]

# Write the modified configuration to docker-compose.override.yaml
with open('docker-compose.override.yaml', 'w') as file:
    yaml.dump(docker_compose, file, sort_keys=False, indent=2, default_flow_style=False)

print("Generated docker-compose.override.yaml successfully")

# Deploy using docker-compose with clean deployment
try:
    print("Starting clean deployment...")

    # Stop existing containers
    subprocess.run(compose_cmd + ["stop"], check=True)

    # Remove existing containers
    subprocess.run(compose_cmd + ["rm", "-f"], check=True)

    # Clean up system (remove unused containers, networks, images)
    subprocess.run(["docker", "system", "prune", "-f"], check=True)

    # Pull latest images
    subprocess.run(compose_cmd + ["pull"], check=True)

    # Deploy with new configuration (up -d for detached mode)
    subprocess.run(compose_cmd + ["up", "-d"], check=True)

    print(f"Successfully deployed {ConnectorName} with clean environment")
except subprocess.CalledProcessError as e:
    print(f"Error during deployment: {e}")
    sys.exit(1)
